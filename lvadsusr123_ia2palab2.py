# -*- coding: utf-8 -*-
"""LVADSUSR123_IA2PALAB2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fDriPlipCl9zRs0FODwyrnPiv8duIYiL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

data = pd.read_csv('/content/sample_data/Mall_Customers.csv')

data.fillna(data.mean(), inplace=True)

scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])
data['Spending_Income_Ratio'] = data['Spending Score (1-100)'] / data['Annual Income (k$)']

sse = []
k_rng = range(1, 10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])
    sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.title('Elbow plot')
plt.plot(k_rng,sse)
plt.show()
print()

silhouette_scores = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k)
    cluster_labels = kmeans.fit_predict(scaled_data)
    silhouette_avg = silhouette_score(scaled_data, cluster_labels)
    silhouette_scores.append(silhouette_avg)

plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score vs. Number of Clusters')
plt.show()
print()

num_clusters = 4
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
clusters = kmeans.fit_predict(scaled_data)

data['Cluster'] = clusters


for cluster_label in range(num_clusters):
    cluster_data = data[data['Cluster'] == cluster_label]
    plt.scatter(cluster_data['Age'], cluster_data['Spending Score (1-100)'], label=f'Cluster {cluster_label}')

centroids = scaler.inverse_transform(kmeans.cluster_centers_)
plt.scatter(centroids[:, 0], centroids[:, 2], color='purple', marker='*', s=150, label='Centroids')

plt.xlabel('Age')
plt.ylabel('Spending Score')
plt.legend()
plt.title('Clusters Visualization with Centroids')
plt.show()
print()

cluster_profile = data.groupby('Cluster').agg({
    'Age': 'mean',
    'Annual Income (k$)': 'mean',
    'Spending Score (1-100)': 'mean',
    'CustomerID': 'count'
}).rename(columns={'CustomerID': 'Count'}).reset_index()
print(cluster_profile)

data.to_csv('clustered_customer_data.csv', index=False)

"""To create effective marketing strategies, first, deeply understand each customer group by examining their ages, incomes, and spending behaviors. Then, tailor promotions and offers to match the unique preferences of each cluster, making sure to reach them through their preferred channels. By continuously refining these strategies based on customer feedback and market trends, you can ensure success and keep your customers engaged and satisfied and eventually increase customer engagement."""