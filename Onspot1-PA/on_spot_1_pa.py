# -*- coding: utf-8 -*-
"""On spot 1- PA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQhiGc_HwJxSg6T0DqbvEfbge6MlEVEY
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
import matplotlib.pyplot as plt

data = pd.read_csv('/content/sample_data/DSAI-LVA-DATASET for Quiz.csv')

label_encoder = LabelEncoder()
data['ParentEducation'] = label_encoder.fit_transform(data['ParentEducation'])
data['Pass'] = label_encoder.fit_transform(data['Pass'])

X = data.drop('Pass', axis=1)
y = data['Pass']

scaler = StandardScaler()
X[['StudyTime', 'PreviousTestScore']] = scaler.fit_transform(X[['StudyTime', 'PreviousTestScore']])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.to_csv('/content/train_data.csv', index=False)
X_test.to_csv('/content/test_data.csv', index=False)

def determine_performance(probabilities):
    if probabilities[0] >= 0.5:
        return 'Fail'
    elif probabilities[1] >= 0.5:
        return 'Pass with Low Grade'
    else:
        return 'Pass with High Grade'

# Decision Tree
clf_dt = DecisionTreeClassifier()
clf_dt.fit(X_train, y_train)
y_pred_prob_dt = clf_dt.predict_proba(X)

# Random Forest
clf_rf = RandomForestClassifier()
clf_rf.fit(X_train, y_train)
y_pred_prob_rf = clf_rf.predict_proba(X)

# XGBoost
clf_xgb = XGBClassifier()
clf_xgb.fit(X_train, y_train)
y_pred_prob_xgb = clf_xgb.predict_proba(X)

performance_categories_dt = [determine_performance(probs) for probs in y_pred_prob_dt]
performance_categories_rf = [determine_performance(probs) for probs in y_pred_prob_rf]
performance_categories_xgb = [determine_performance(probs) for probs in y_pred_prob_xgb]

data['DT_Performance'] = performance_categories_dt
data['RF_Performance'] = performance_categories_rf
data['XGB_Performance'] = performance_categories_xgb

data.to_csv('/content/DSAI-LVA-DATASET with Performance.csv', index=False)

model_outcome = {
    "Decision Tree": performance_categories_dt,
    "Random Forest": performance_categories_rf,
    "XGBoost": performance_categories_xgb
}

model_comparison = {
    "Decision Tree Accuracy": accuracy_score(y, clf_dt.predict(X)),
    "Random Forest Accuracy": accuracy_score(y, clf_rf.predict(X)),
    "XGBoost Accuracy": accuracy_score(y, clf_xgb.predict(X))
}

with open('model_results.txt', 'w') as file:
    file.write("Model Outcome:\n")
    for model, outcome in model_outcome.items():
        file.write(f"{model} Outcome: {outcome[:5]}\n")

    file.write("\nModel Comparison:\n")
    for model, accuracy in model_comparison.items():
        file.write(f"{model}: {accuracy}\n")

plt.bar(model_comparison.keys(), model_comparison.values())
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.title('Model Comparison')
plt.xticks(rotation=45)
plt.tight_layout()

plt.savefig('model_comparison_plot.png')

plt.savefig('model_comparison_plot.png')
plt.show()